<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Search_Algorithms.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Search_Algorithms.cpp" />
              <option name="originalContent" value="#include &lt;bits/stdc++.h&gt;&#10;using namespace std;&#10;&#10;&#10;int sequentialSearchIterative(const vector&lt;int&gt;&amp; a, int target) {&#10;    (void)a; (void)target; // not implemented&#10;    return -1;&#10;}&#10;&#10;int sequentialSearchRecursive(const vector&lt;int&gt;&amp; a, int target, int i = 0) {&#10;    (void)a; (void)target; (void)i; // not implemented&#10;    return -1;&#10;}&#10;&#10;// Binary search (iterative)&#10;int binarySearchIterative(const vector&lt;int&gt;&amp; a, int target) {&#10;    int l = 0, r = (int)a.size() - 1;&#10;    while (l &lt;= r) {&#10;        int m = l + (r - l) / 2;&#10;        if (a[m] == target) return m;&#10;        if (a[m] &lt; target) l = m + 1; else r = m - 1;&#10;    }&#10;    return -1;&#10;}&#10;&#10;// Binary search (recursive)&#10;int binarySearchRecursive(const vector&lt;int&gt;&amp; a, int target, int l = 0, int r = -1) {&#10;    if (r == -1) r = (int)a.size() - 1;&#10;    if (l &gt; r) return -1;&#10;    int m = l + (r - l) / 2;&#10;    if (a[m] == target) return m;&#10;    if (a[m] &lt; target) return binarySearchRecursive(a, target, m + 1, r);&#10;    return binarySearchRecursive(a, target, l, m - 1);&#10;}&#10;&#10;// Read an integer with prompt; keep asking until valid&#10;static int readInt(const string&amp; prompt) {&#10;    for (;;) {&#10;        if (!prompt.empty()) cout &lt;&lt; prompt;&#10;        int x;&#10;        if (cin &gt;&gt; x) return x;&#10;        cout &lt;&lt; &quot;Invalid input. Try again.\n&quot;;&#10;        cin.clear();&#10;        cin.ignore(numeric_limits&lt;streamsize&gt;::max(), '\n');&#10;    }&#10;}&#10;&#10;static void printMenu() {&#10;    cout &lt;&lt; &quot;\nSearch Algorithms\n&quot;;&#10;    cout &lt;&lt; &quot;1) Binary Search (Iterative)\n&quot;;&#10;    cout &lt;&lt; &quot;2) Binary Search (Recursive)\n&quot;;&#10;    cout &lt;&lt; &quot;3) Sequential Search (Iterative)\n&quot;;&#10;    cout &lt;&lt; &quot;4) Sequential Search (Recursive)\n&quot;;&#10;    cout &lt;&lt; &quot;0) Exit\n&quot;;&#10;}&#10;&#10;int main() {&#10;    while (true) {&#10;        printMenu();&#10;        int choice = readInt(&quot;Choose: &quot;);&#10;        if (choice == 0) break;&#10;&#10;        int n = readInt(&quot;Enter number of elements: &quot;);&#10;        while (n &lt;= 0) { cout &lt;&lt; &quot;Invalid n\n&quot;; n = readInt(&quot;Enter number of elements: &quot;); }&#10;        vector&lt;int&gt; a(n);&#10;        if (choice == 1 || choice == 2) cout &lt;&lt; &quot;Enter &quot; &lt;&lt; n &lt;&lt; &quot; sorted integers:\n&quot;; else cout &lt;&lt; &quot;Enter &quot; &lt;&lt; n &lt;&lt; &quot; integers:\n&quot;;&#10;        for (int i = 0; i &lt; n; ++i) a[i] = readInt(&quot;&quot;);&#10;        int target = readInt(&quot;Enter target: &quot;);&#10;&#10;        int idx = -1;&#10;        if (choice == 1) idx = binarySearchIterative(a, target);&#10;        else if (choice == 2) idx = binarySearchRecursive(a, target);&#10;        else if (choice == 3) idx = sequentialSearchIterative(a, target);&#10;        else if (choice == 4) idx = sequentialSearchRecursive(a, target);&#10;        else { cout &lt;&lt; &quot;Unknown option\n&quot;; continue; }&#10;&#10;        if (idx &gt;= 0) cout &lt;&lt; &quot;Found at index &quot; &lt;&lt; idx &lt;&lt; &quot;\n&quot;; else cout &lt;&lt; &quot;Not found\n&quot;;&#10;    }&#10;    cout &lt;&lt; &quot;Goodbye!\n&quot;;&#10;    return 0;&#10;}" />
              <option name="updatedContent" value="#include &lt;bits/stdc++.h&gt;&#10;using namespace std;&#10;&#10;&#10;int sequentialSearchIterative(const vector&lt;int&gt;&amp; a, int target) {&#10;    (void)a; (void)target; // not implemented&#10;    return -1;&#10;}&#10;&#10;int sequentialSearchRecursive(const vector&lt;int&gt;&amp; a, int target, int i = 0) {&#10;    (void)a; (void)target; (void)i; // not implemented&#10;    return -1;&#10;}&#10;&#10;// Binary search (iterative)&#10;int binarySearchIterative(const vector&lt;int&gt;&amp; a, int target) {&#10;    int l = 0, r = (int)a.size() - 1;&#10;    while (l &lt;= r) {&#10;        int m = l + (r - l) / 2;&#10;        if (a[m] == target) return m;&#10;        if (a[m] &lt; target) l = m + 1; else r = m - 1;&#10;    }&#10;    return -1;&#10;}&#10;&#10;// Binary search (recursive)&#10;int binarySearchRecursive(const vector&lt;int&gt;&amp; a, int target, int l = 0, int r = -1) {&#10;    if (r == -1) r = (int)a.size() - 1;&#10;    if (l &gt; r) return -1;&#10;    int m = l + (r - l) / 2;&#10;    if (a[m] == target) return m;&#10;    if (a[m] &lt; target) return binarySearchRecursive(a, target, m + 1, r);&#10;    return binarySearchRecursive(a, target, l, m - 1);&#10;}&#10;&#10;// Read an integer with prompt; keep asking until valid&#10;static int readInt(const string&amp; prompt) {&#10;    for (;;) {&#10;        if (!prompt.empty()) cout &lt;&lt; prompt;&#10;        int x;&#10;        if (cin &gt;&gt; x) return x;&#10;        cout &lt;&lt; &quot;Invalid input. Try again.\n&quot;;&#10;        cin.clear();&#10;        cin.ignore(numeric_limits&lt;streamsize&gt;::max(), '\n');&#10;    }&#10;}&#10;&#10;static void printMenu() {&#10;    cout &lt;&lt; &quot;\nSearch Algorithms\n&quot;;&#10;    cout &lt;&lt; &quot;1) Binary Search (Iterative)\n&quot;;&#10;    cout &lt;&lt; &quot;2) Binary Search (Recursive)\n&quot;;&#10;    cout &lt;&lt; &quot;3) Sequential Search (Iterative)\n&quot;;&#10;    cout &lt;&lt; &quot;4) Sequential Search (Recursive)\n&quot;;&#10;    cout &lt;&lt; &quot;0) Exit\n&quot;;&#10;}&#10;&#10;int main() {&#10;    while (true) {&#10;        printMenu();&#10;        int choice = readInt(&quot;Choose: &quot;);&#10;        if (choice == 0) break;&#10;&#10;        int n = readInt(&quot;Enter number of elements: &quot;);&#10;        while (n &lt;= 0) { cout &lt;&lt; &quot;Invalid n\n&quot;; n = readInt(&quot;Enter number of elements: &quot;); }&#10;        vector&lt;int&gt; a(n);&#10;        if (choice == 1 || choice == 2) cout &lt;&lt; &quot;Enter &quot; &lt;&lt; n &lt;&lt; &quot; sorted integers:\n&quot;; else cout &lt;&lt; &quot;Enter &quot; &lt;&lt; n &lt;&lt; &quot; integers:\n&quot;;&#10;        for (int i = 0; i &lt; n; ++i) a[i] = readInt(&quot;&quot;);&#10;        int target = readInt(&quot;Enter target: &quot;);&#10;&#10;        int idx = -1;&#10;        if (choice == 1) idx = binarySearchIterative(a, target);&#10;        else if (choice == 2) idx = binarySearchRecursive(a, target);&#10;        else if (choice == 3) idx = sequentialSearchIterative(a, target);&#10;        else if (choice == 4) idx = sequentialSearchRecursive(a, target);&#10;        else { cout &lt;&lt; &quot;Unknown option\n&quot;; continue; }&#10;&#10;        if (idx &gt;= 0) cout &lt;&lt; &quot;Found at index &quot; &lt;&lt; idx &lt;&lt; &quot;\n&quot;; else cout &lt;&lt; &quot;Not found\n&quot;;&#10;    }&#10;    cout &lt;&lt; &quot;Goodbye!\n&quot;;&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>